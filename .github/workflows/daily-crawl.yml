name: Daily News Crawl

on:
    # schedule:
    #   - cron: '0 0,4,8,12,16,20 * * *'  # Runs 6 times daily every 4 hours (00:00, 04:00, 08:00, 12:00, 16:00, 20:00 UTC)
    workflow_dispatch: # Manual trigger for testing
    # push:
    #     branches: [main] # Also run on pushes to main for testing

jobs:
  crawl-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Allow time(minutes) for model downloads

    permissions:
      contents: write # Allow pushing changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          echo "Dependencies installed"

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps chromium

      - name: Create directories
        run: |
          mkdir -p data
          mkdir -p site
          mkdir -p .cache
          mkdir -p pdfs

      - name: Crawl RSS feeds
        run: |
          echo "ü§ñ Starting RSS crawl..."
          node scripts/crawl.js
          echo "Crawl completed"

      - name: Generate article PDFs
        run: npm run url-to-pdf

      - name: Optimize and validate
        run: |
          # Validate JSON files
          echo "üîç Validating data files..."
          node -e "
            const fs = require('fs');
            try {
              JSON.parse(fs.readFileSync('data/latest-raw.json'));
              console.log('‚úÖ Data files valid');
            } catch(e) {
              console.error('‚ùå Invalid JSON:', e.message);
              process.exit(1);
            }
          "

          # Check if we have articles
          ARTICLE_COUNT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('data/latest-raw.json')).articles.length)")
          echo "üìä Found $ARTICLE_COUNT articles"

          if [ "$ARTICLE_COUNT" -lt 10 ]; then
            echo "‚ö†Ô∏è Warning: Low article count ($ARTICLE_COUNT)"
          fi

      - name: Commit and push changes
        run: |
          git config --local user.email "zhangluo-bot@users.noreply.github.com"
          git config --local user.name "zhangluo Bot"

          # Stash any uncommitted changes (including untracked files) before pulling
          git stash push -u -m "Auto-stash before pull" || echo "Nothing to stash"

          # Pull latest changes first to avoid conflicts
          git pull origin main --rebase || {
            echo "Failed to pull latest changes, trying merge..."
            git pull origin main --no-rebase || {
              echo "Pull failed, continuing with current state..."
            }
          }

          # Pop stashed changes back
          git stash pop || echo "No stash to pop"

          # Add all changes including deletions
          git add data/
          git add pdfs/
          git add -u  # Stage deletions

          # Create commit message with stats
          ARTICLE_COUNT=$(node -e "console.log(JSON.parse(require('fs').readFileSync('data/latest-raw.json')).articles.length)")
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')

          # Check what's being committed
          git status --short

          git commit -m "ü§ñ Update news - $ARTICLE_COUNT articles - $TIMESTAMP" || {
            echo "No changes to commit"
            exit 0
          }

          # Push changes with retry logic
          git push || {
            echo "Push failed, trying with --force-with-lease..."
            git push --force-with-lease
          }

      - name: Report status
        run: |
          echo "‚úÖ Workflow completed successfully!"
          echo "üìä Statistics:"
          node -e "
            const data = JSON.parse(require('fs').readFileSync('data/latest-raw.json'));
            console.log(`Articles: ${data.articles.length}`);
          "

# Environment variables for the workflow
env:
    ENV_TEST: 'test' # a sample variable for testing
